
"""
对代码架构与设计相关的理解
"""

"""
抽象：
    1. 抽象对象是共有或共用的属性。
    2. 抽象功能是应用中的变化。
    3. 何时使用抽象：在现在或将来发生变化的东西进行抽象收益最大。
    4. 代码表现形式：接口类、抽象类、泛型类以及方法、集合
    5. 数学上的抽象与关系抽象 - 集合与集合运算关系

类的表示：
    ——————————————————————
    | Employee           |
    ——————————————————————
    | -name: String      |
    ——————————————————————
    | + getName(): String|
    ——————————————————————
    
    属性的表示： 可见性  名称 ： 类型 [=缺省值]
    方法的表示:  可见性  名称（参数列表）[：返回值类型]
    可见性：- 私有，+ 公有，# 保护
    

类之间的关系：
    1. 继承关系（is-a)：
        1） 泛化，小车 ——|> 车，继承非抽象类
        2） 实现，小车 ---|> 车，继承抽象类
        代码表现形式：继承接口、抽象类、泛型类、具体类等
        
    2. 聚合关系（contains-a): A ——<> B, A聚合到B，整体由部分构成。
        整体与部分不是强依赖关系，即使整体不存在了，部分也可存在。比如部门撤销，人还在。
        代码表现形式：成员变量
    
    3. 组合关系（has-a): A ——<||> B , 实体菱形，A组合到B，整体包含部分。
        整体与部分是强依赖关系，即使整体不存在了，部分也不存在。比如脸与口鼻的关系。
        代码表现形式：成员变量
    
    4. 关联关系：A —— B，双向关联，A ——> B，单向关联。 A ——> A,自关联。
        对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象之间为关联关系。
        描述不同对象之间的结构的关系，表示 A全程知道B。
        代码表现形式：成员变量
        比如：企鹅需要‘知道’气候的变化，需要‘了解’气候规律
    
    5. 依赖关系：A ---> B, A依赖于B，
        对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系。
        与关联的区别：A在运行期间并不需要全程知道B，只是临时使用，之后依赖也可能变为其他实体。
        代码表现形式： 类构造方法、类方法的传入参数。
        比如：动物依赖氧气和水。调用新陈代谢方法需要氧气类与水类的实例作为参数
        
        
功能组件：
    
    
时序驱动：
    
    
测试驱动开发：
    单元测试最重要的价值之一：“通过编写测试反向推动设计改进”。
    如何测试驱动开发？
    
TDD迭代开发：
    

设计模式：
    设计模式是被发现，而不是被发明出来的

    三个实用设计方法：
        找出应用中可能需要变化之处，把他们独立出来。
        针对接口编程，而不是针对实现
        多用组合，少用继承
    
好的代码品味：
    消除边界情况：
        1）消除大量的if-else，保持代码主流程的流畅
        2）充分利用语言特性来消除边界情况，比如 三元表达式/or/try-catch/数学模型/第三方库
        
代码质量：
    圈复杂度：if条件判断分支数量
    
算法：
    时间复杂度、空间复杂度
    
并发编程：

产品流程与devops关系：
    问题与想法 -> 需求 -> 产品设计 -> 架构与代码设计 -> 开发实现 -> 部署 -> 测试 -> 使用 -> 反馈评价意见
    

"""