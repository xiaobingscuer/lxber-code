#!/usr/bin/python
# coding=utf-8

"""
solid设计原则
"""

""" 
开闭原则（Open Close Principle）：

描述：对修改关闭，对扩展开放；

内涵解释：
    修改：对已有的代码修改；
    扩展：对新功能新实体的添加开放；对变化的行为开放；
    开闭原则是类和接口的总体设计，以及开发人员如何构建允许随时间变化的代码指南；
    “开放-关闭原则”告诉我们，类应该通过扩展而不是修改的方式改变自己的行为；
    设计建议：确定需求中可能更改的部分或者难以实现的部分，并将这些部分排除在扩展点之后？

生活中的例子：
    电子设备，只需更改配件即可，无需更改设备引擎；
    
违反原则的坏处：
    “这世间唯一不变的，只有变化本身。”
    1. 要修改已有的代码。不同人员不同的素质，即使相同的人也要重新理解已有代码，对修改结果不好控制。
    
违反原则后的修复方法：
    1. 使用类继承来改造代码。
        关键点在于：找到父类中会变动的部分，将其抽象成新的方法（或属性），最终允许新的子类来重写它以改变类的行为。
        
    2. 使用组合与依赖注入来改造代码。
        依赖注入（Dependency injection）允许我们在类实例化时，通过参数将业务逻辑的变化点：如排序算法 注入到类实例中，实现“开放-关闭原则”。
    
    3. 使用数据驱动思想来改造代码
        核心思想在于：将经常变动的东西，完全以数据的方式抽离出来。当需求变动时，只改动数据，代码逻辑保持不动。
        与“依赖注入”有一些相似，同样是把变化的东西抽离到类外部。
        不同的是，“依赖注入”抽离的通常是类（实体），而“数据驱动思想”抽离的是数据。
        但“数据驱动思想”的可定制性不如前面的两种方式。
    
代码举例：
    sorted(l, key=lambda i: i % 3)，通过传入key，来扩展不同的排序方式；

"""