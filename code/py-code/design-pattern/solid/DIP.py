#!/usr/bin/python
# coding=utf-8

"""
solid设计原则
"""

""" 
依赖倒转原则（Dependence Inversion Principle）：

描述：高层模块不应该依赖于低层模块，二者都应该依赖于抽象；具体对象应依赖抽象类；

内涵解释：
    抽象：变化的行为；共有的属性
    抽象的好处显而易见：它解耦了高层模块和低层模块间的依赖关系，让代码变得更灵活。
    但抽象同时也带来了额外的编码与理解成本。所以，了解何时 不 抽象与何时抽象同样重要。
    只有对代码中那些现在或未来会发生变化的东西进行抽象，才能获得最大的收益。

生活中的例子：
    插头具体实现可以有铜线和铝线等不同实现方式。
    但，插头不应该依赖具体某种电线，它只需要有线并且能导电。
    
违反原则的坏处：
    1. 设计变得复杂，给测试代码复杂性
    
违反原则后的修复方法：
    1. 建立抽象，高层和低层都依赖抽象，而不是高层直接依赖低层。
    
代码举例：

"""